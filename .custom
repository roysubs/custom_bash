#!/bin/bash
export HISTTIMEFORMAT="%F %T  " HISTCONTROL=ignorespace:ignoreboth:erasedups HISTSIZE=100000 HISTFILESIZE=200000
export LS_COLORS=$LS_COLORS:'di=0;36'   # dirs to cyan "0;36" instead of dark blue on black
export PS1="[\[\033[01;$(if [ $(id -u) -eq 0 ]; then echo "31m"; else echo "33m"; fi)\]\u\[\033[00m\]@\h\[\033[01;31m\]:\[\033[01;36m\] \w\[\033[00m\]]\$ "   # non-root users in yellow, root user in red (by testing on 'id -u' = 0 for root
alias sudo='sudo '                     # Fixes alias expansion when using sudo vi etc
alias l.='ls -Fhd .* --color=auto --group-directories-first'   # Update ls aliases to group by directory first and -F, -h
alias l='ls -Fhla --color=auto --group-directories-first'
alias ll.='ls -Fhld .* --color=auto --group-directories-first'
alias ll='ls -Fhl --color=auto --group-directories-first'
alias ls='ls -Fh --color=auto --group-directories-first'
alias lss='stat --printf="%A\t%a\t%h\t%U\t%G\t%s\t%.19y\t%n\n"'  # ls+security (shows the octal code as well as normal ls security flags)
alias g='git'; alias gst='git status'; alias gcm='git commit -m'; alias gcl='git clone'; alias gst='git stash'; alias glog='git log'
alias gc='git config'; alias gcg='git config --global'; alias gcname='git config --global user.name; git config --global user.email'
alias gst='git status'; alias gcm='git commit -m'; alias gcl='git clone'; alias gst='git stash'; alias glog='git log'
alias gadu='git add -u'; alias gall='git add .'   # Git shortcuts (see link in profile notes) 
# Maybe do these as functions: pki(nstall), pkr(emove), pkh(istory), pks(earch) => find OS and use tool for that OS
# Maybe a single function 'pk' with arguments i, r, h, s, gi(groupinstall), gl(grouplist)
alias di='sudo dnf install'; alias dr='sudo dnf remove'; alias ds='dnf search'; dh='dnf history'   # apt
alias yi='sudo yum install'; alias yr='sudo yum remove'; alias ys='yum search'; yh='yum history'   # yum
alias ai='sudo apt install'; alias ar='sudo apt remove'; alias as='apt search'; ah='apt history'   # apt
alias q='exit'
alias hs='history | grep -A 2 -B 2'      # Search history, and finding 2 lines above/below each result
alias s!='eval "sudo $(fc -ln -1)"'       # Equivalent to "sudo !!", rerun last command but as superuser
alias def='command -V'                    # Show definitions: command -v, type <aliasname>, bash -xl
alias dusort='du -hsc $(ls -A) | sort -h' # du on each item in ls (including hidden). Larger than M:  grep -E ^[0-9]+?\.?[0-9]+M
# Only re-alias 'cat' if 'bat' is present. 'unalias cat' to revert to normal 'cat' if wanted.
[ -f /usr/bin/bat ] && alias cat='bat -pp' && alias cats='sudo cat' && c='cat' && alias b='bat' # alias if 'bat' installed
[ ! -f /usr/bin/bat ] && unalias cat 2>/dev/null && unalias cats 2>/dev/null && unalias c 2>/dev/null && unalias b 2>/dev/null # remove if uninstalled
# Add simple colour to LESS/MAN pages, useful for visibility
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
export GROFF_NO_SGR=1                  # not for putty (konsole and gnome-terminal)
[ ${BASH_VERSINFO[0]} -ge 4 ] && shopt -s autocd    # autocd if bash ver 4+, i.e. type a directory name to cd into it
patch() { echo 123; }   # function to do patching in the right order, i.e. 'upgrade' = 'update' + 'remove obsolete packages', what else?
viconf() { COLUMNS=12; printf "Edit config file:\n\n"; select x in ~/.bash_profile ~/.bashrc ~/.inputrc ~/.vimrc; do vim $x; break; done; }
viconfsu() { COLUMNS=12; printf "Edit config file (with sudo):\n\n"; select x in /etc/profile /etc/bashrc /etc/inputrc /etc/vimrc; do sudo vim $x; break; done; }
keepalive() { while [ 1 ]; do clear; top -n 1 -b | head -18; printf "\n"; ll -h | head -10; printf "\n"; date +"%T"; sleep 8; done; }
md() { [ $# = 1 ] && mkdir -p "$@" && cd "$@" || echo "Error - no directory passed!"; }  # 'mkdir' + 'cd'
# rd() { [ $# = 1 ] && [ "$(ls -A "$@")" ] && echo "Not Empty" || echo "Empty"
ver() { printf "$(cat /etc/redhat-release): $(uname -msr)\n"; }
sys() { awk -F": " '/^model name/ { mod=$2 } /^cpu MHz/ { mhz=$2 } /^cpu core/ {core=$2} /^flags/ { virt="No Virtualisation";match($0,"svm");if (RSTART!=0) { virt="SVM-Virtualisation" };match($0,"vmx");if (RSTART!=0) { virt="VMX-Virtualisation" } } /^Mem:/ {split($2,arr," ");tot=arr[1];free=arr[2]} END { printf "%s, %dMHz, %s core(s), %s, %sB Memory (%sB Used)\n",mod,mhz,core,virt,tot,free }' /proc/cpuinfo <(free -mh); printf "$(hostname -I),$(uptime)\n"; }
Color256() { curl -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/ | bash; }   # Run script from url
figall() { for f in /usr/share/figlet/*.flf; do fs=$(basename $f); fname=${fs%%}; echo "$fname"; figlet -f $fname $fname; done; }
figrnd() { rand=$(ls /usr/share/figlet/*.flf | sort -R | tail -1); printf "$rand\n\n"; figlet -w $(tput cols) -f $rand "$1"; }   # 'sort -R' is random, also note 'shuf'
fignow() { figlet -w $(tput cols) -f small $(date +"%b %d, Week %V"); [ -f /usr/share/figlet/univers.flf ] && local opts="-f univers" || local opts="-f big"; figlet -w $(tput cols) $opts $(date +"%H:%M"); }
runfromurl() { curl -s $2 > $1; chmod a+x $1; ls -l $1; if [ $3 = "print" ]; then cat "./$1"; fi; if [ $3 = "run" ]; then exec "./$1"; fi; }
if [ -z "$TMUX" ]; then ver; sys; [ -f /usr/bin/figlet ] && fignow; fi   # Only run this if not in a tmux session
# [ -z $TMUX ] && export TERM=xterm-256color && exec tmux   # if using 'tmux' can use this to always start tmux


